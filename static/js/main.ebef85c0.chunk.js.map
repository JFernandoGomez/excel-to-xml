{"version":3,"sources":["components/input.js","App.js","serviceWorker.js","index.js"],"names":["fixLabel","label","trim","replace","InputExcel","useState","fileValues","setFileValues","fileName","setFileName","useEffect","xml","builder","create","stringify","name","end","pretty","console","log","link","document","createElement","bb","Blob","type","setAttribute","window","URL","createObjectURL","dataset","downloadurl","download","href","join","body","appendChild","click","createXMLformValues","id","value","onChange","e","file","files","target","length","includes","fileValidName","fileReader","FileReader","onload","a","async","bstr","result","wb","XLSX","read","parsedFile","SheetNames","wsname","ws","Sheets","data","utils","sheet_to_json","readAsBinaryString","handleXLS","error","App","className","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uXA0CMA,EAAW,SAACC,GAGhB,OADiBA,EAAMC,OAAOC,QAAQ,MAAO,MAsDhCC,EA9BI,WAAO,IAAD,EACWC,qBADX,mBAClBC,EADkB,KACNC,EADM,OAEOF,mBAAS,IAFhB,mBAElBG,EAFkB,KAERC,EAFQ,KAIvBC,qBAAU,WACRD,EAAY,IAzBY,SAACH,GAC3B,GAAKA,EAAL,CACA,IAAIK,EAAMC,IAAQC,OAAOP,EAAY,CACnCQ,UAAW,CACTC,KAAMf,KAGTgB,IAAI,CAAEC,QAAQ,IAEfC,QAAQC,IAAIR,GACZ,IAAIS,EAAOC,SAASC,cAAc,KAC9BC,EAAK,IAAIC,KAAK,CAACb,GAAM,CAACc,KAAM,eAChCL,EAAKM,aAAa,OAAQC,OAAOC,IAAIC,gBAAgBN,IACrDH,EAAKM,aAAa,WAAY,iBAC9BN,EAAKU,QAAQC,YAAc,CAAC,aAAcX,EAAKY,SAAUZ,EAAKa,MAAMC,KAAK,KACzEb,SAASc,KAAKC,YAAYhB,GAE1BA,EAAKiB,SASHC,CAAoBhC,KACnB,CAACA,IAkBJ,OACE,2BAAOmB,KAAK,OAAOc,GAAG,QAAQC,MAAOhC,EAAUiC,SAjB9B,SAACC,GAClB,IAA4BC,EAAxBC,EAAQF,EAAEG,OAAOD,MAChBA,GAA0B,IAAjBA,EAAME,OA/CF,SAAC/B,GACrB,QAAQ,GACN,KAAKA,EAAKgC,SAAS,QACnB,KAAKhC,EAAKgC,SAAS,OACnB,KAAKhC,EAAKgC,SAAS,OACjB,OAAO,EACT,QAAS,OAAO,GA8CXC,EADLL,EAAOC,EAAM,IACW7B,MAhFV,SAAC4B,EAAMpC,GAEvB,IAAI0C,EAAa,IAAIC,WACrBD,EAAWE,OAAS,SAAOT,GAAP,qCAAAU,EAAAC,OAAA,gDAEdC,EAAOZ,EAAEG,OAAOU,OAChBC,EAAKC,IAAKC,KAAKJ,EAAM,CAAE7B,KAAM,WAG7BkC,EAAa,GANC,iCAQOH,EAAGI,YARV,yBAAAR,EAAA,4DAAAA,EAAA,sDAQHS,EARG,EAUZC,EAAKN,EAAGO,OAAOF,GAGfG,EAAOP,IAAKQ,MAAMC,cAAcJ,GAGpCH,EAAWE,GAAUG,EAhBL,uLAAAZ,EAAA,mIAoBlB7C,EAAcoD,GApBI,4EAsBpBV,EAAWkB,mBAAmBxB,GA2D5ByB,CAAUzB,EAAMpC,GAHdW,QAAQmD,MAAM,8BALdnD,QAAQmD,MAAM,wBChELC,EAZH,WACV,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,2CACA,kBAAC,EAAD,MACA,kECEYC,QACW,cAA7B7C,OAAO8C,SAASC,UAEe,UAA7B/C,OAAO8C,SAASC,UAEhB/C,OAAO8C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASxD,SAASyD,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ebef85c0.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport XLSX from 'xlsx';\nimport builder from 'xmlbuilder';\n\nconst handleXLS = (file, setFileValues) => {\n  \n  var fileReader = new FileReader();\n  fileReader.onload = async (e) => {\n    // Parse data\n    let bstr = e.target.result;\n    let wb = XLSX.read(bstr, { type: 'binary' });\n    \n    // create empty output parsedFile Container\n    let parsedFile = {};\n\n    for await (let wsname of wb.SheetNames) {\n      // get content by sheetName;\n      let ws = wb.Sheets[wsname];\n\n      // Convert array of arrays\n      let data = XLSX.utils.sheet_to_json(ws);\n\n      // Append sheetValues to sheetName\n      parsedFile[wsname] = data;\n    }\n    \n    // Update state\n    setFileValues(parsedFile);\n  };\n  fileReader.readAsBinaryString(file);\n};\n\nconst fileValidName = (name) => {\n  switch (true) {\n    case name.includes('xlsx'):\n    case name.includes('xls'):\n    case name.includes('xlt'):\n      return true;\n    default: return false;\n  }\n} \n\nconst fixLabel = (label) => {\n  // trim and replace all spaces\n  let fixedLabel = label.trim().replace(/ /gi, '_');\n  return fixedLabel;\n}\n\nconst createXMLformValues = (fileValues) => {\n  if (!fileValues) return;\n  var xml = builder.create(fileValues, {\n    stringify: {\n      name: fixLabel\n    }\n  })\n  .end({ pretty: true});\n \n  console.log(xml);\n  var link = document.createElement(\"a\");\n  var bb = new Blob([xml], {type: 'text/plain'});\n  link.setAttribute('href', window.URL.createObjectURL(bb));\n  link.setAttribute(\"download\", \"generated.xml\");\n  link.dataset.downloadurl = ['text/plain', link.download, link.href].join(':');\n  document.body.appendChild(link); // Required for FF\n\n  link.click(); // This will download the data file named \"my_data.csv\".\n}\n\nconst InputExcel = () => {\n  let [fileValues, setFileValues] = useState();\n  let [fileName, setFileName] = useState('');\n\n  useEffect(() => {\n    setFileName('');\n    createXMLformValues(fileValues);\n  }, [fileValues])\n\n  let handleChange = (e) => {\n    var files = e.target.files, file;\n    if (!files || files.length === 0) {\n      console.error('No File selected');\n      return;\n    }\n    file = files[0];\n    if (!fileValidName(file.name)) {\n      console.error('Not the right type of file');\n      return;\n    }\n    handleXLS(file, setFileValues);\n  }\n\n  // console.log(fileValues);\n\n  return (\n    <input type=\"file\" id=\"input\" value={fileName} onChange={handleChange} />\n  );\n};\n\nexport default InputExcel;","import React from 'react';\nimport './App.css';\nimport InputExcel from './components/input';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>XLSX to XML</h1>\n        <InputExcel></InputExcel>\n        <h3>Only supports .xls, .xlsx, .xlt</h3>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}